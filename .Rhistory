summary(lmp)
lmp=aovp(weight_perm ~ feed,perm="Prob",Cp=1e-6)
summary(lmp)
lmp=aovp(weight_perm ~ feed,perm="Prob",Cp=1e-6)
summary(lmp)
lmp=aovp(weight_perm ~ feed,perm="Prob",Cp=1e-6)
summary(lmp)
lmp=aovp(weight_perm ~ feed,perm="Prob",Cp=1e-6)
summary(lmp)
data(iris)
attach(iris)
head(iris)
species.name <- factor(Species, labels=c('setosa','versicolor','virginica'))
iris4        <- iris[,1:4]
plot(iris4,col=species.name)
i1 <- which(species.name=='setosa')
i2 <- which(species.name=='versicolor')
i3 <- which(species.name=='virginica')
n1 <- length(i1)
n2 <- length(i2)
n3 <- length(i3)
n  <- n1+n2+n3
g  <- length(levels(species.name))
p  <- 4
fit <- manova(as.matrix(iris4) ~ species.name)
summary.manova(fit,test="Wilks")
T0 <- -summary.manova(fit,test="Wilks")$stats[1,2]
T0
set.seed(seed)
T_stat <- numeric(B)
for(perm in 1:B){
# choose random permutation
permutation <- sample(1:n)
species.name.perm <- species.name[permutation]
fit.perm <- manova(as.matrix(iris4) ~ species.name.perm)
T_stat[perm] <- -summary.manova(fit.perm,test="Wilks")$stats[1,2]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-2,1))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstanr::install_cmdstan()
check_cmdstan_toolchain(fix = TRUE)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE)
cmdstanr::install_cmdstan()
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstanr::install_cmdstan()
library(rjags)
library(coda)
# for plots
library(ggplot2)
library(tidyr)
library(dplyr)
library(purrr)
library(ggsci)
require(gplots)
require(ggpubr)
setwd("~/UNI/NECSTCamp/StPetersburgINCART")
df1 <- read.csv('1-FirstTenSignals.csv', header = True)
df1 <- read.csv('1-FirstTenSignals.csv', header = TRUE)
head(df1)
matplot(df1)
matplot(df1['I01'], type = 'l')
setwd("~/UNI/NECSTCamp/StPetersburgINCART")
df1 <- read.csv('HB_I01.csv', header = TRUE)
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
head(df1)
matplot(df1['X0'], type = 'l')
peaks = read.csv('HB_I01/Peaks.csv', header = TRUE)
head(peaks)
abline(v = 85, color = 'r', type = '-')
abline(v = 85, color = 'r', type = '--')
abline(v = 85, col = 'r', lwd= '--')
abline(v = 85, col = 'red', lty= '--')
abline(v = 85, col = "red", lty= "--")
abline(v = 85, col = "red", lty= 1)
abline(v = 85, col = "red", lty= 2)
abline(v = 85, col = "red", lty= 3)
abline(v = 85, col = "red", lty= 4)
abline(v = 85, col = "red", lty= 5)
head(peaks)
che
plle
head(peaks)
peaks[1,1]
peaks[0,1]
abline(v = peaks[1,1] + 85, col = 'blue')
abline(v = peaks[1,2] + 85, col = 'green')
abline(v = peaks[1,4] + 85, col = 'green')
abline(v = peaks[1,7] + 85, col = 'yellow')
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
head(df1)
matplot(df1['X0'], type = 'l')
abline(v = 85, col = "red")
peaks = read.csv('HB_I01/Peaks.csv', header = TRUE)
head(peaks)
matplot(df1['X0'], type = 'l')
abline(v = 85, col = "red")
abline(v = peaks[1,1] + 85, col = 'blue')
abline(v = peaks[1,4] + 85, col = 'green')
abline(v = peaks[1,7] + 85, col = 'yellow')
abline(v = peaks[1,8] + 85, col = 'pink')
library(fda)
length(df1['x0'])
length(df1['X0'])
dim(df1['X0'])
time = 1:169
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=60)
data_HB.fb <- Data2fd(y = df1['X0'],argvals = time,basisobj = basis)
firstHB = df1['X0']
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=60)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
basis
plot(basis)
is(firstHB)
data_W <- CanadianWeather$dailyAv[,,1]
is(data_W)
firstHB = array(df1['X0'])
is(firstHB)
firstHB = vector(df1['X0'])
firstHB = df1$X0
is(firstHB)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
plot.fd(data_W.fd.3)
plot.fd(data_HB.fb)
points(time,firstHB ,type="l",col="blue",lwd=2)
plot.fd(data_HB.fb, lwd=2)
points(time,firstHB ,type="l",col="blue",lwd=1)
points(time,firstHB ,col="blue",lwd=1)
points(time,firstHB ,col="blue")
plot.fd(data_HB.fb)
points(time,firstHB ,col="blue")
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=30)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
plot.fd(data_HB.fb)
points(time,firstHB ,type="l",col="blue",lwd=1)
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=31)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
plot.fd(data_HB.fb)
points(time,firstHB ,type="l",col="blue",lwd=1)
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=15)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
plot.fd(data_HB.fb)
points(time,firstHB ,type="l",col="blue",lwd=1)
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=30)
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=31)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
plot.fd(data_HB.fb)
points(time,firstHB ,type="l",col="blue",lwd=1)
basis <- create.fourier.basis(rangeval=c(0,168),nbasis=31)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
basis <- create.fourier.basis(rangeval=c(0,169),nbasis=31)
data_HB.fb <- Data2fd(y = firstHB,argvals = time,basisobj = basis)
plot.fd(data_HB.fb)
points(time,firstHB ,type="l",col="blue",lwd=1)
setwd("~/UNI/NECSTCamp/StPetersbirg_git/ECGanalysis")
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
head(df2)
# dataset I01
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
head(df1)
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
head(df2)
names(df2)
names(df2) <-
'ciao' + str(15)
names(df2) <-
print('ciao' + str(15))
names(df2) <-
print("ciao" + str(15))
names(df2) <-
print("ciao" + toString(15))
print(paste('ciao',toString(15)))
dim(df1)[2]
names(df2)[i] <- paste(names(df2)[i],"I02", sep = "_")
names(df2) <-
for (i in 1:dim(df2)[2]) {
names(df2)[i] <- paste(names(df2)[i],"I02", sep = "_")
}
names(df2)
i = 1
names(df2)[i]
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
names(df2)[i]
paste(names(df2)[i],"I02", sep = "_")
names(df2)[i] <- paste(names(df2)[i],"I02", sep = "_")
names(df2)[i]
names(df2) <-
for (i in 1:dim(df2)[2]) {
names(df2)[i] <- paste(names(df2)[i],"I02", sep = "_")
}
names(df2)
dim(df2)[2]
vec_of_names = numeric(dim(df2)[2])
vec_of_names[i] <- paste(names(df2)[i],"I02", sep = "_")
for (i in 1:dim(df2)[2]) {
vec_of_names[i] <- paste(names(df2)[i],"I02", sep = "_")
}
vec_of_names
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
head(df2)
for (i in 1:dim(df2)[2]) {
vec_of_names[i] <- paste(names(df2)[i],"I02", sep = "_")
}
vec_of_names
names(df2) = vec_of_names
names(df2)
vec_of_names = numeric(dim(df1)[2])
for (i in 1:dim(df1)[2]) {
vec_of_names[i] <- paste(names(df1)[i],"I01", sep = "_")
}
vec_of_names
names(df1) = vec_of_names
df = merge(df1, df2, sort = TRUE)
head(df)
df = cbind(df1, df2)
head(df)
dim(df)
rowMeans(df)
HB_mean = rowMeans(df)
plot(HB_mean, lwd = 2, col = 'b')
plot(HB_mean, lwd = 2, col = 'b.lack')
plot(HB_mean, lwd = 2, col = 'black')
plot(HB_mean, lwd = 2, col = 'black', lty = 'line')
plot(HB_mean, lwd = 2, col = 'black', type = 'line')
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
plot(df, lwd = 1, col = 'grey', type = 'l')
library(ggplot2)
ggp <- ggplot(df, aes(x, y, col = 'grey')) +             # Create ggplot2 plot
geom_line()
ggp
ggp <- ggplot(df, aes(1:dim(df)[1], df, col = 'grey')) +             # Create ggplot2 plot
geom_line()
ggp
data_ggp <- data.frame(x = 1:dim(df)[1],                            # Reshape data frame
y = df)
head(data_ggp)
ggp <- ggplot(data_ggp, aes(x, y, col = 'grey')) +             # Create ggplot2 plot
geom_line()
ggp
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
for ( c in df ) lines( c, type="l", col = 'grey' )
for ( c in df ) plot( c, type="l", col = 'grey' )
for ( c in df ) lines( c, type="l", col = 'grey' )
for ( c in df ) lines( c, type="l", col = 'grey' )
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
for ( c in df ) lines( c, type="l", col = 'grey' )
punti = read.csv('HB_I01/Peaks.csv', header = TRUE)
head(punti7)
head(punti)
P_onset = punti$ECG_P_Peaks
T_offset = punti$ECG_T_Offsets
length(P_onset)
P_onset_x = punti$ECG_P_Peaks
T_offset_x = punti$ECG_T_Offsets
P_onset = df1[:,1]
P_onset = df1[,1]
P_onset
P_onset = df1[85+P_onset_x,1]
T_offset = df1[85+T_offset_x,1]
P_onset
P_onset = df1[85+P_onset_x,1]
T_offset = df1[85+T_offset_x,1]
P_onset
P_onset = df1[85+P_onset_x[1],1]
T_offset = df1[85+T_offset_x[1],1]
P_onset
T_offset
vertical_shift = (P_onset + T_offset)/2
vertical_shift
df1[,1] -= vertical_shift
df1[,1] = df1[,1] - vertical_shift
df1[,1]
plot(df1[,1])
plot(df1[,1], type = 'l')
# dataset I01
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
# mi sa che Ã¨ troppo
# tolgo inizio e fine del segnale
end = dim(df1)[1]
dim(df1)
vertical_shift = (df1[1,1] + df1[end,1])/2
vertical_shift
df1[,1] = df1[,1] - vertical_shift
plot(df1[,1], type = 'l')
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
head(df1)
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
for (i in dim(df1)[2]){
vertical_shift = (df1[1,i] + df1[end,i])/2
df1[,1] = df1[,1] - vertical_shift
lines(df1[,i],type="l", col = 'grey' )
}
for (i in dim(df1)[2]){
vertical_shift = (df1[1,i] + df1[end,i])/2
df1[,i] = df1[,i] - vertical_shift
lines(df1[,i],type="l", col = 'grey' )
}
# dataset I01
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
for (i in dim(df1)[2]){
vertical_shift = (df1[1,i] + df1[end,i])/2
df1[,i] = df1[,i] - vertical_shift
lines(df1[,i],type="l", col = 'grey' )
}
plot(df1[,1], type = 'l')
for (i in dim(df1)[2]){
vertical_shift = (df1[1,i] + df1[end,i])/2
df1[,i] = df1[,i] - vertical_shift
lines(df1[,i],type="l", col = 'grey' )
}
vertical_shift = (df1[1,1] + df1[end,1])/2
df1[,1] = df1[,1] - vertical_shift
plot(df1[,1], type = 'l')
for (i in dim(df1)[2]){
vertical_shift = (df1[1,i] + df1[end,i])/2
df1[,i] = df1[,i] - vertical_shift
lines(df1[,i],type="l", col = 'grey' )
}
lines(df1[,50], type = 'l', col = 'red')
df1[,50]
i = 50
df1[1,i]
df1[end,i]
(df1[1,i] + df1[end,i])/2
vertical_shift = (df1[1,i] + df1[end,i])/2
vertical_shift
df1[,i] = df1[,i] - vertical_shift
df1[,i]
lines(df1[,i],type="l", col = 'grey' )
lines(df1[,50], type = 'l', col = 'red')
for (i in 1:dim(df1)[2]){
vertical_shift = (df1[1,i] + df1[end,i])/2
df1[,i] = df1[,i] - vertical_shift
lines(df1[,i],type="l", col = 'grey' )
}
plot(df1[,1], type = 'l')
for (i in 1:dim(df1)[2]){
vertical_shift = (df1[1,i] + df1[end,i])/2
df1[,i] = df1[,i] - vertical_shift
lines(df1[,i],type="l", col = 'grey' )
}
lines(df1[,50], type = 'l', col = 'red', lwd =2)
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
head(df1)
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
head(df2)
df1 <- read.csv('HB_I01/Signals.csv', header = TRUE)
head(df1)
# changing names of the columns
vec_of_names = numeric(dim(df1)[2])
for (i in 1:dim(df1)[2]) {
vec_of_names[i] <- paste(names(df1)[i],"I01", sep = "_")
}
vec_of_names
names(df1) = vec_of_names
df2 <- read.csv('HB_I02/Signals.csv', header = TRUE)
head(df2)
# same here
vec_of_names = numeric(dim(df2)[2])
for (i in 1:dim(df2)[2]) {
vec_of_names[i] <- paste(names(df2)[i],"I02", sep = "_")
}
vec_of_names
names(df2) = vec_of_names
df = cbind(df1, df2)
head(df)
dim(df)
# computing the mean of all the heartbeats
HB_mean = rowMeans(df)
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
for ( c in df ) lines( c, type="l", col = 'grey' )
line(HB_mean, lwd = 2, col = 'black', type = 'l')
lines(HB_mean, lwd = 2, col = 'black', type = 'l')
library(matrixStats)
HB_median = rowMedian(df)
HB_median = rowMedians(df)
HB_median = rowMedians(as.matrix(df))
HB_median
lines(HB_median, lwd = 2, col = 'red', type = 'l')
# Load package fda
library(fda) # we'll use these functions
# Create the basis
help(create.bspline.basis)
# inizio a provare un po' di smoothing
dim(df)
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=50, norder=4)
plot(basis)
time = 1:end
basismat <- eval.basis(time, basis)
smooth1 <- basismatbis %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=15, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=30, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=40, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
nbasis <- 45:60
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.bspline.basis(c(0,end), nbasis[i], 4)
gcv[i] <- smooth.basis(time, HB_mean, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
nbasis <- 45:60
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.bspline.basis(c(0,end), nbasis[i], 4)
gcv[i] <- smooth.basis(time, HB_mean, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
# inserirsco il valore trovato
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=59, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
plot(time, HB_mean)
plot(time, HB_mean, type = 'l')
abline(v = c(85-2,85+2))
abline(v = c(85-2,85+2), col = 'r')
abline(v = c(85-2,85+2), col = 'red')
abline(v = c(85-5,85+5), col = 'orange')
abline(v = c(85-10,85+10), col = 'yellow')
abline(v = c(85-1,85+1), col = 'red')
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
punti = read.csv('HB_I01/Peaks.csv', header = TRUE)
head(punti)
df1
head(punti)
plot(df1[,1], type = 'l')
df1[c(1,3)]
head(punti)
colMeans(punti)
round(12.7)
round(12.5)
round(12.2)
round(colMeans(punti))
points(round(colMeans(punti)))
points(HB_mean[85 + round(colMeans(punti))])
points(round(colMeans(punti)),HB_mean[85 + round(colMeans(punti))])
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
points(85+round(colMeans(punti)),HB_mean[85 + round(colMeans(punti))])
punti2 = read.csv('HB_I02/Peaks.csv', header = TRUE)
head(punti2)
punti1 = read.csv('HB_I01/Peaks.csv', header = TRUE)
head(punti)
punti2 = read.csv('HB_I02/Peaks.csv', header = TRUE)
head(punti2)
punti = c(punti1,punti2)
head(punti)
punti = rbind(punti1,punti2)
head(punti)
dim(punti)
dim(punti1)[1] + dim(punti2)[1]
dim(punti1)[1]
dim(punti2)[1]
punti_medi = round(colMeans(punti))
points(85+punti_medi,HB_mean[85 + punti_medi])
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
points(85+punti_medi,HB_mean[85 + punti_medi])
abline(v = c(85-1,85+1), col = 'red')
abline(v = c(85-2,85+2), col = 'red')
abline(v = c(85-5,85+5), col = 'orange')
abline(v = c(85-10,85+10), col = 'yellow')
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=59, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
points(85+punti_medi,HB_mean[85 + punti_medi])
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=59, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,end), nbasis=40, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
