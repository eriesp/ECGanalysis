head(punti2)
punti = rbind(punti1,punti2)
head(punti)
dim(punti)
punti_medi = round(colMeans(punti))
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
points(85+punti_medi,HB_mean[85 + punti_medi])
punti_medi
# divido il mio segnale in tre intervalli:
abline(v = punti_medi$ECG_R_Onsets - 2)
# divido il mio segnale in tre intervalli:
abline(v = punti_medi[5] - 2)
# divido il mio segnale in tre intervalli:
abline(v = 85 - punti_medi[5] - 2)
# divido il mio segnale in tre intervalli:
abline(v = 85 + punti_medi[5] - 2)
plot(time,HB_mean,xlab="t",ylab="observed data")
# divido il mio segnale in tre intervalli:
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
abline(v = 85 + punti_medi[5] - 2)
abline(v = 85 + punti_medi[7] + 3)
curvaP = HB_mean[1:(85 + punti_medi[5] - 2)]
plot(curvaP)
# divido il mio segnale in tre intervalli:
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
points(85+punti_medi,HB_mean[85 + punti_medi])
abline(v = 85 + punti_medi[7] + 3)
length(HB_mean)
curvaT = HB_mean[(85 + punti_medi[7] + 3):169]
plot(curvaT)
plot(curvaR)
curvaR = HB_mean[(85 + punti_medi[5] - 1):(85 + punti_medi[7] + 2)]
plot(curvaR)
length(curvaP) + length(curvaR) + length(curvaT)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=5, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
library(fda)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=5, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
# trovo numero know ideale per curvaP
time = 1:length(curvaP)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=5, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
time = 1:length(curvaP)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=10, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=15, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
time = 1:length(curvaP)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=13, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
time = 1:length(curvaP)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=10, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=13, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
nbasis <- 5:20
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.bspline.basis(c(0,length(curvaP)), nbasis[i], 4)
gcv[i] <- smooth.basis(time, curvaP, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
basis <- create.bspline.basis(rangeval=c(0,length(curvaP)), nbasis=18, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaP, intercept=FALSE)$coef
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
points(85+punti_medi,HB_mean[85 + punti_medi])
plot(time,curvaP,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
time = 1:length(curvaT)
basis <- create.bspline.basis(rangeval=c(0,length(curvaT)), nbasis=13, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaT, intercept=FALSE)$coef
plot(time,curvaT,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaT)), nbasis=5, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaT, intercept=FALSE)$coef
plot(time,curvaT,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaT)), nbasis=7, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaT, intercept=FALSE)$coef
plot(time,curvaT,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaT)), nbasis=13, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaT, intercept=FALSE)$coef
plot(time,curvaT,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
nbasis <- 5:20
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.bspline.basis(c(0,length(curvaT)), nbasis[i], 4)
gcv[i] <- smooth.basis(time, curvaT, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
basis <- create.bspline.basis(rangeval=c(0,length(curvaT)), nbasis=18, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaT, intercept=FALSE)$coef
plot(time,curvaT,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaT)), nbasis=13, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaT, intercept=FALSE)$coef
plot(time,curvaT,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
time = 1:length(curvaR)
basis <- create.bspline.basis(rangeval=c(0,length(curvaR)), nbasis=13, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaR, intercept=FALSE)$coef
plot(time,curvaR,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaR)), nbasis=20, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaR, intercept=FALSE)$coef
plot(time,curvaR,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
nbasis <- 15:25
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.bspline.basis(c(0,length(curvaR)), nbasis[i], 4)
gcv[i] <- smooth.basis(time, curvaR, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
basis <- create.bspline.basis(rangeval=c(0,length(curvaR)), nbasis=13, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaR, intercept=FALSE)$coef
plot(time,curvaR,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
basis <- create.bspline.basis(rangeval=c(0,length(curvaR)), nbasis=23, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth <- basismat %*% lsfit(basismat, curvaR, intercept=FALSE)$coef
plot(time,curvaR,xlab="t",ylab="observed data")
points(time,smooth ,type="l",col="green",lwd=2)
interval = n/(punti_medi[7] + 3 - punti_medi[5])
n = 30
interval = n/(punti_medi[7] + 3 - punti_medi[5])
interval
(punti_medi[7] + 3 - punti_medi[5])
length(curvaR)
n = 30
interval = n/(punti_medi[7] + 3 - punti_medi[5])
nodi = c(seq(1, 85 + punti_medi[5] - 2,19),
seq(85 + punti_medi[5] - 1, 85 + punti_medi[7] + 2,interval),
seq(85 + punti_medi[7] + 3,length(HB_mean)))
nodi
length(nodi)
n = 15
interval = n/(punti_medi[7] + 3 - punti_medi[5])
nodi = c(seq(1, 85 + punti_medi[5] - 2,19),
seq(85 + punti_medi[5] - 1, 85 + punti_medi[7] + 2,interval),
seq(85 + punti_medi[7] + 3,length(HB_mean)))
length(nodi)
1:2:50
seq(from = 1, to = 85, length.out = 25)
seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19)
seq(85 + punti_medi[5] - 1, 85 + punti_medi[7] + 2,length.out = n)
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(85 + punti_medi[7] + 3,length(HB_mean)))
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n)
n = 30
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n)
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
nodi
length(nodi)
n = 15
interval = n/(punti_medi[7] + 3 - punti_medi[5])
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = lenth(HB_mean)
end = length(HB_mean)
end
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(0,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
# provo con il gcv con questo nuovo set di nodi
nknots <- 10:30
gcv <- numeric(length(nknots))
for (i in 1:length(nknots)){
#creazione del vettore di nodi
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = nknots[i]),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
# creazione della base
basis <- create.bspline.basis(c(0,length(HB_mean)), breaks = nodi, 4)
gcv[i] <- smooth.basis(time, HB_mean, basis)$gcv
}
i = 1
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = nknots[i]),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
basis <- create.bspline.basis(c(0,end), breaks = nodi, 4)
nodi
end
# creazione della base
basis <- create.bspline.basis(c(1,end), breaks = nodi, 4)
# creazione della base
basis <- create.bspline.basis(c(1,end), breaks = nodi, norder = 4)
# provo con il gcv con questo nuovo set di nodi
nknots <- 10:30
gcv <- numeric(length(nknots))
for (i in 1:length(nknots)){
#creazione del vettore di nodi
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = nknots[i]),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
# creazione della base
basis <- create.bspline.basis(c(1,end), breaks = nodi, norder = 4)
gcv[i] <- smooth.basis(time, HB_mean, basis)$gcv
}
par(mfrow=c(1,1))
plot(nknots,gcv)
nknots[which.min(gcv)]
n = 18
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 17
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 16
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 15
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 14
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 15
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 10
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 15
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 20
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
n = 15
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
# numerical derivative
der_obs <- (HB_mean[3:end]-HB_mean[1:(end-2)])/(time[3:end]-time[1:(end-2)])
# derivative from spline approximation
basismat_der<- eval.basis(time, basis, Lfdobj=1)
der_smooth <- basismat_der %*% lsfit(basismat_der, HB_mean, intercept=FALSE)$coef
# plot
plot(time[2:(NT-1)],der_obs,xlab="t",ylab="first differences x",type="l")
points(time,der_smooth ,type="l",col="blue",lwd=2)
# plot
plot(time[2:(end-1)],der_obs,xlab="t",ylab="first differences x",type="l")
points(time,der_smooth ,type="l",col="blue",lwd=2)
n = 20
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
# derivative from spline approximation
basismat_der<- eval.basis(time, basis, Lfdobj=1)
der_smooth <- basismat_der %*% lsfit(basismat_der, HB_mean, intercept=FALSE)$coef
# plot
plot(time[2:(end-1)],der_obs,xlab="t",ylab="first differences x",type="l")
points(time,der_smooth ,type="l",col="blue",lwd=2)
# plot
plot(time,der_smooth ,type="l",col="blue",lwd=2)
points(time[2:(end-1)],der_obs,xlab="t",ylab="first differences x",type="l")
n = 15
nodi = c(seq(from = 1, to = 85 + punti_medi[5] - 2, length.out = 19),
seq(from = 85 + punti_medi[5] - 1,to = 85 + punti_medi[7] + 2,length.out = n),
seq(from = 85 + punti_medi[7] + 3,to = length(HB_mean), length.out = 14))
length(nodi)
end = length(HB_mean)
time = 1:end
# inizio con le spline con una distribuzione uniforme di knots
basis <- create.bspline.basis(rangeval=c(1,end), breaks = nodi, norder=4)
plot(basis)
basismat <- eval.basis(time, basis)
smooth1 <- basismat %*% lsfit(basismat, HB_mean, intercept=FALSE)$coef
plot(time,HB_mean,xlab="t",ylab="observed data")
points(time,smooth1 ,type="l",col="green",lwd=2)
# numerical derivative
der_obs <- (HB_mean[3:end]-HB_mean[1:(end-2)])/(time[3:end]-time[1:(end-2)])
# derivative from spline approximation
basismat_der<- eval.basis(time, basis, Lfdobj=1)
der_smooth <- basismat_der %*% lsfit(basismat_der, HB_mean, intercept=FALSE)$coef
# plot
plot(time,der_smooth ,type="l",col="blue",lwd=2)
points(time[2:(end-1)],der_obs,xlab="t",ylab="first differences x",type="l")
setwd("~/UNI/NECSTCamp/StPetersbirg_git/ECGanalysis")
library(fda)
df1 <- read.csv('HB_I03/Signals.csv', header = TRUE)
head(df1)
# changing names of the columns
vec_of_names = numeric(dim(df1)[2])
for (i in 1:dim(df1)[2]) {
vec_of_names[i] <- paste(names(df1)[i],"I03", sep = "_")
}
vec_of_names
names(df1) = vec_of_names
df2 <- read.csv('HB_I04/Signals.csv', header = TRUE)
head(df2)
# same here
vec_of_names = numeric(dim(df2)[2])
for (i in 1:dim(df2)[2]) {
vec_of_names[i] <- paste(names(df2)[i],"I04", sep = "_")
}
vec_of_names
names(df2) = vec_of_names
df3 <- read.csv('HB_I05/Signals.csv', header = TRUE)
head(df2)
# same here
vec_of_names = numeric(dim(df2)[2])
for (i in 1:dim(df2)[2]) {
vec_of_names[i] <- paste(names(df2)[i],"I05", sep = "_")
}
vec_of_names
names(df2) = vec_of_names
# joining the two datasets because coming from the same patitent
df = cbind(df1, df2, df3)
head(df)
dim(df)
# computing the mean of all the heartbeats
HB_mean = rowMeans(df)
plot(HB_mean, lwd = 2, col = 'black', type = 'l')
for ( c in df ) lines( c, type="l", col = 'grey' )
lines(HB_mean, lwd = 2, col = 'black', type = 'l')
