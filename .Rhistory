k = 220
abline(v = k)
punti_medi[10] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
k = 60
abline(v = k)
punti_medi[2] = k - rpeak
# questo problema dei punti è ingestibile anyway
# li shifto
k = 85
abline(v = k)
punti_medi[3] = k - rpeak
# R offset
k = 120
abline(v = k)
punti_medi[6] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# list.of.fda = list(i = smoothing_modified)
list.of.fda = c(list.of.fda, list(smoothing_modified))
length(list.of.fda)
length(indeces)
i = 38
load("R_functions/smoothin_modified.RData")
df <- read.csv(paste(names[indeces[i]],'/Smooth.csv',sep = ''), header = TRUE)
dim(df)
y0 = df$Smoothed_data
plot(y0, lwd = 2, col = 'black', type = 'l')
punti = read.csv(paste(names[indeces[i]],'/Peaks.csv',sep = ''), header = TRUE)
punti_medi = round(apply(punti, 2, mean, na.rm = TRUE))
# r_peak
rpeak = ceiling(length(y0) / 2)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
# questo problema dei punti è ingestibile anyway
# li shifto
k = 85
abline(v = k)
# questo problema dei punti è ingestibile anyway
# li shifto
k = 90
abline(v = k)
punti_medi[3] = k - rpeak
k = 65
abline(v = k)
punti_medi[2] = k - rpeak
k = 175
abline(v = k)
punti_medi[9] = k - rpeak
k = 170
abline(v = k)
punti_medi[9] = k - rpeak
k = 205
abline(v = k)
k = 203
abline(v = k)
punti_medi[8] = k - rpeak
k = 220
abline(v = k)
k = 230
abline(v = k)
punti_medi[10] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
k = 70
abline(v = k)
punti_medi[2] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# list.of.fda = list(i = smoothing_modified)
list.of.fda = c(list.of.fda, list(smoothing_modified))
length(list.of.fda)
i = 39
df <- read.csv(paste(names[indeces[i]],'/Smooth.csv',sep = ''), header = TRUE)
dim(df)
y0 = df$Smoothed_data
plot(y0, lwd = 2, col = 'black', type = 'l')
punti = read.csv(paste(names[indeces[i]],'/Peaks.csv',sep = ''), header = TRUE)
punti_medi = round(apply(punti, 2, mean, na.rm = TRUE))
# r_peak
rpeak = ceiling(length(y0) / 2)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
# questo problema dei punti è ingestibile anyway
# li shifto
k = 75
abline(v = k)
# questo problema dei punti è ingestibile anyway
# li shifto
k = 70
abline(v = k)
punti_medi[3] = k - rpeak
k = 65
abline(v = k)
k = 60
abline(v = k)
punti_medi[1] = k - rpeak
k = 170
abline(v = k)
k = 160
abline(v = k)
punti_medi[8] = k - rpeak
k = 180
abline(v = k)
punti_medi[10] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# list.of.fda = list(i = smoothing_modified)
list.of.fda = c(list.of.fda, list(smoothing_modified))
length(list.of.fda)
i = 40
df <- read.csv(paste(names[indeces[i]],'/Smooth.csv',sep = ''), header = TRUE)
dim(df)
y0 = df$Smoothed_data
plot(y0, lwd = 2, col = 'black', type = 'l')
punti = read.csv(paste(names[indeces[i]],'/Peaks.csv',sep = ''), header = TRUE)
punti_medi = round(apply(punti, 2, mean, na.rm = TRUE))
# r_peak
rpeak = ceiling(length(y0) / 2)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
# questo problema dei punti è ingestibile anyway
# li shifto
k = 70
abline(v = k)
# questo problema dei punti è ingestibile anyway
# li shifto
k = 60
abline(v = k)
punti_medi[3] = k - rpeak
# questo problema dei punti è ingestibile anyway
# li shifto
k = 65
abline(v = k)
punti_medi[3] = k - rpeak
k = 47
abline(v = k)
punti_medi[2] = k - rpeak
k = 170
abline(v = k)
punti_medi[10] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# list.of.fda = list(i = smoothing_modified)
list.of.fda = c(list.of.fda, list(smoothing_modified))
i = 41
df <- read.csv(paste(names[indeces[i]],'/Smooth.csv',sep = ''), header = TRUE)
dim(df)
y0 = df$Smoothed_data
plot(y0, lwd = 2, col = 'black', type = 'l')
punti = read.csv(paste(names[indeces[i]],'/Peaks.csv',sep = ''), header = TRUE)
punti_medi = round(apply(punti, 2, mean, na.rm = TRUE))
# r_peak
rpeak = ceiling(length(y0) / 2)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
# questo problema dei punti è ingestibile anyway
# li shifto
k = 110
abline(v = k)
punti_medi[3] = k - rpeak
# R onset
k = 115
abline(v = k)
punti_medi[5] = k - rpeak
k = 100
abline(v = k)
punti_medi[1] = k - rpeak
k = 85
abline(v = k)
punti_medi[2] = k - rpeak
k = 195
abline(v = k)
k = 190
abline(v = k)
punti_medi[9] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
k = 90
abline(v = k)
punti_medi[2] = k - rpeak
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
# R onset
k = 110
abline(v = k)
punti_medi[5] = k - rpeak
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
k = 85
abline(v = k)
punti_medi[2] = k - rpeak
# R onset
k = 115
abline(v = k)
punti_medi[5] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
k = 90
abline(v = k)
punti_medi[2] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# list.of.fda = list(i = smoothing_modified)
list.of.fda = c(list.of.fda, list(smoothing_modified))
length(list.of.fda)
i = 42
df <- read.csv(paste(names[indeces[i]],'/Smooth.csv',sep = ''), header = TRUE)
dim(df)
y0 = df$Smoothed_data
plot(y0, lwd = 2, col = 'black', type = 'l')
punti = read.csv(paste(names[indeces[i]],'/Peaks.csv',sep = ''), header = TRUE)
punti_medi = round(apply(punti, 2, mean, na.rm = TRUE))
# r_peak
rpeak = ceiling(length(y0) / 2)
# plot dei punti importanti
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
k = 40
abline(v = k)
punti_medi[2] = k - rpeak
# questo problema dei punti è ingestibile anyway
# li shifto
k = 65
abline(v = k)
punti_medi[3] = k - rpeak
k = 160
abline(v = k)
k = 165
abline(v = k)
punti_medi[9] = k - rpeak
k = 180
abline(v = k)
punti_medi[8] = k - rpeak
k = 200
abline(v = k)
punti_medi[10] = k - rpeak
plot(y0, lwd = 2, col = 'black', type = 'l')
points(rpeak+punti_medi[c(1,2,3,5,6,8,9,10)],y0[rpeak + punti_medi[c(1,2,3,5,6,8,9,10)]], col = 'red')
abline(v = rpeak, col = 'red')
write.csv(data.frame(punti_medi),paste(names[indeces[i]],'/Punti_medi.csv',sep = ''), row.names = FALSE)
load("R_functions/smoothin_modified.RData")
# smoothing
smoothing_modified = smoothing_modified(y0,rpeak = rpeak, punti_medi = punti_medi)
# list.of.fda = list(i = smoothing_modified)
list.of.fda = c(list.of.fda, list(smoothing_modified))
length(list.of.fda)
i = 43
df <- read.csv(paste(names[indeces[i]],'/Smooth.csv',sep = ''), header = TRUE)
save(list.of.fda, file = 'lista_dei_gobj.RData')
save(list.of.fda, file = 'lista_dei_fobj.RData')
basismat.fd = list.of.fda[1]
time = 1:200
basismat.fd = list.of.fda[1]
smooth <- eval.fd(time, basismat.fd)
basismat.fd
basismat.fd = list.of.fda[1]$i
smooth <- eval.fd(time, basismat.fd)
basismat.fd
time = seq(1,169,200)
time
time = linspace(1,169,200)
time = linespace(1,169,200)
time = linespace(1,169,length.out = 200)
time = seq(1,169,length.out = 200)
time
smooth <- eval.fd(time, basismat.fd)
plot(time,smooth,type = 'l')
file = paste(names[i],'/Smooth.csv',sep = '')
df = read.csv(file, header = TRUE)
i = 42
file = paste(names[indeces[i]],'/Smooth.csv',sep = '')
df = read.csv(file, header = TRUE)
dim(df)
indeces[2:]
indeces[-1]
is(list.of.fda[2])
list.of.fda[2]
list.of.fda[[2]]
is(list.of.fda[[2]])
smooth
# metto in una matrice tutte le funzioni che ho smoothate
Y0 = t(smooth)
Y0
smooth_1 <- eval.fd(time, basismat.fd, Lfd=1)
plot(time,smooth_1,tyoe = 'l')
plot(time,smooth_1,type = 'l')
Y1 = t(smooth_1)
dim(df)[1]
rbind(Y0,smooth)
rbind(Y0,t(smooth))
time = seq(1,169,length.out = 200)
basismat.fd = list.of.fda[1]$i
smooth <- eval.fd(time, basismat.fd)
smooth_1 <- eval.fd(time, basismat.fd, Lfd=1)
plot(time,smooth,type = 'l')
plot(time,smooth_1,type = 'l')
# metto in una matrice tutte le funzioni che ho smoothate
Y0 = t(smooth)
Y1 = t(smooth_1)
for (i in 2:length(list.of.fda)){
file = paste(names[indeces[i]],'/Smooth.csv',sep = '')
df = read.csv(file, header = TRUE)
time = seq(1,dim(df)[1],length.out = 200)
basismat.fd = list.of.fd[[i]]
smooth <- eval.fd(time, basismat.fd)
smooth_1 <- eval.fd(time, basismat.fd, Lfd=1)
Y0 = rbind(Y0,t(smooth))
Y1 = rbind(Y1,t(smooth_1))
}
for (i in 2:length(list.of.fda)){
file = paste(names[indeces[i]],'/Smooth.csv',sep = '')
df = read.csv(file, header = TRUE)
time = seq(1,dim(df)[1],length.out = 200)
basismat.fd = list.of.fda[[i]]
smooth <- eval.fd(time, basismat.fd)
smooth_1 <- eval.fd(time, basismat.fd, Lfd=1)
Y0 = rbind(Y0,t(smooth))
Y1 = rbind(Y1,t(smooth_1))
}
matplot(Y0)
matplot(t(Y0), type = 'l')
matplot(t(Y0), type = 'l', xlab = 'index')
library(fdakma)
kma
fdakma_example <- kma(
x=time, y0=Y0, y1=Y1, n.clust = 3,
warping.method = 'affine',
similarity.method = 'd0.pearson',  # similarity computed as the cosine
# between the functions
# (correlation)
center.method = 'k-means'
#seeds = c(1,21) # you can give a little help to the algorithm...
)
kma.show.results(fdakma_example)
graphics.off()
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd0.pearson',  # similarity computed as the cosine
# between the functions
# (correlation)
center.method = 'k-means'
#seeds = c(1,21) # you can give a little help to the algorithm...
)
kma.show.results(fdakma_example)
# k = 8
fdakma_example <- kma(
x=time, y0=Y0, n.clust = 8,
warping.method = 'affine',
similarity.method = 'd0.pearson',  # similarity computed as the cosine
# between the functions
# (correlation)
center.method = 'k-means'
#seeds = c(1,21) # you can give a little help to the algorithm...
)
kma.show.results(fdakma_example)
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the functions
# (correlation)
center.method = 'k-means'
#seeds = c(1,21) # you can give a little help to the algorithm...
)
kma.show.results(fdakma_example)
matplot(t(Y1), type = 'l', xlab = 'index')
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the derivative functions
# (correlation)
center.method = 'k-means',
seeds = c(1,21) # you can give a little help to the algorithm...
)
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the derivative functions
# (correlation)
center.method = 'k-means',
#seeds = c(1,21) # you can give a little help to the algorithm...
)
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the derivative functions
# (correlation)
center.method = 'k-means',
seeds = c(1,21) # you can give a little help to the algorithm...
)
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the derivative functions
# (correlation)
center.method = 'k-means',
seeds = 21 # you can give a little help to the algorithm...
)
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the derivative functions
# (correlation)
center.method = 'k-means',
seeds = rep(21,42) # you can give a little help to the algorithm...
)
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the derivative functions
# (correlation)
center.method = 'k-means',
seeds = rep(1,4) # you can give a little help to the algorithm...
)
# k = 5
fdakma_example <- kma(
x=time, y0=Y0, y1 = Y1, n.clust = 5,
warping.method = 'affine',
similarity.method = 'd1.pearson',  # similarity computed as the cosine
# between the derivative functions
# (correlation)
center.method = 'k-means'
#seeds = rep(1,4) # you can give a little help to the algorithm...
)
